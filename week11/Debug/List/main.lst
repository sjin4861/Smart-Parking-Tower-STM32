###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       13/Nov/2024  19:32:48
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\user\main.c
#    Command line =  
#        -f C:\Users\pnu10\AppData\Local\Temp\EWF1B6.tmp
#        (C:\Users\pnu10\Desktop\embedded_system-main\week11\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\Debug\List -o
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu10\Desktop\embedded_system-main\week11\libraries\LCD\
#        -I C:\Users\pnu10\Desktop\embedded_system-main\week11\user\ -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\user\inc\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\Debug\List\main.lst
#    Object file  =  
#        C:\Users\pnu10\Desktop\embedded_system-main\week11\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu10\Desktop\embedded_system-main\week11\user\main.c
      1          #include "stm32f10x.h"
      2           #include "core_cm3.h"
      3           #include "misc.h"
      4           #include "stm32f10x_gpio.h"
      5           #include "stm32f10x_rcc.h"
      6           #include "stm32f10x_usart.h"
      7           #include "stm32f10x_adc.h"
      8           #include "touch.h"
      9           #include "lcd.h"
     10           //?@@ @@@ ?@@
     11          

   \                                 In section .data, align 2
     12          uint16_t LCD_TEAM_NAME_X = 100;
   \                     LCD_TEAM_NAME_X:
   \   00000000   0x0064             DC16 100

   \                                 In section .data, align 2
     13          uint16_t LCD_TEAM_NAME_Y = 100;
   \                     LCD_TEAM_NAME_Y:
   \   00000000   0x0064             DC16 100
     14          

   \                                 In section .data, align 2
     15          uint16_t LCD_BUTTON_X = 0x50;
   \                     LCD_BUTTON_X:
   \   00000000   0x0050             DC16 80

   \                                 In section .data, align 2
     16          uint16_t LCD_BUTTON_Y = 0x65;
   \                     LCD_BUTTON_Y:
   \   00000000   0x0065             DC16 101

   \                                 In section .data, align 2
     17          uint16_t LCD_BUTTON_W = 0x30;
   \                     LCD_BUTTON_W:
   \   00000000   0x0030             DC16 48

   \                                 In section .data, align 2
     18          uint16_t LCD_BUTTON_H = 0x30;
   \                     LCD_BUTTON_H:
   \   00000000   0x0030             DC16 48
     19          

   \                                 In section .data, align 2
     20          uint16_t LCD_STATUS_X = 0x50;
   \                     LCD_STATUS_X:
   \   00000000   0x0050             DC16 80

   \                                 In section .data, align 2
     21          uint16_t LCD_STATUS_Y = 0x55;
   \                     LCD_STATUS_Y:
   \   00000000   0x0055             DC16 85
     22          

   \                                 In section .bss, align 2
     23          uint16_t motorAngle;
   \                     motorAngle:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     24          uint16_t motorDir;
   \                     motorDir:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     25          uint16_t t1;
   \                     t1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     26          uint16_t t2;
   \                     t2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     27          uint16_t ledOn;
   \                     ledOn:
   \   00000000                      DS8 2
     28          

   \                                 In section .data, align 4
     29           int color[12] = 
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 64519
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000FC07   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     30            {WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,BRRED,GRAY};
     31          
     32          

   \                                 In section .text, align 2, keep-with-next
     33          void RCC_Configure(void)
     34          {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     35             RCC_APB1PeriphClockCmd(RCC_APB1ENR_TIM2EN, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     36             RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     37             RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE); 
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2020             MOVS     R0,#+32
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     38             RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     39             RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     40          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void GPIO_Configure(void)
     43          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
     44             GPIO_InitTypeDef GPIO_InitStructure;
     45             uint16_t prescale = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     46             TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     47             TIM_OCInitTypeDef TIM_OCInitStructure;
     48             // LED 1
     49             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     50             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     51             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000012   0x2010             MOVS     R0,#+16
   \   00000014   0xF88D 0x0003      STRB     R0,[SP, #+3]
     52             GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x40011400
   \   0000001E   0x.... 0x....      BL       GPIO_Init
     53             // LED 2
     54             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   \   00000022   0x2008             MOVS     R0,#+8
   \   00000024   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     55             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     56             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   0000002E   0x2010             MOVS     R0,#+16
   \   00000030   0xF88D 0x0003      STRB     R0,[SP, #+3]
     57             GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable5_3  ;; 0x40011400
   \   0000003A   0x.... 0x....      BL       GPIO_Init
     58             // PWM motor
     59             GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     60             GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000044   0x2018             MOVS     R0,#+24
   \   00000046   0xF88D 0x0003      STRB     R0,[SP, #+3]
     61             GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0xF88D 0x0002      STRB     R0,[SP, #+2]
     62             GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000050   0x4669             MOV      R1,SP
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable5_4  ;; 0x40010c00
   \   00000056   0x.... 0x....      BL       GPIO_Init
     63             
     64             prescale = (uint16_t)(SystemCoreClock / 1000000)- 1;
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_5
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable5_6  ;; 0xf4240
   \   00000064   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000068   0x1E40             SUBS     R0,R0,#+1
     65             
     66             TIM_TimeBaseStructure.TIM_Period = 20000- 1;
   \   0000006A   0xF644 0x611F      MOVW     R1,#+19999
   \   0000006E   0xF8AD 0x1008      STRH     R1,[SP, #+8]
     67             TIM_TimeBaseStructure.TIM_Prescaler = prescale;
   \   00000072   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     68             TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     69             TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Down;
   \   0000007C   0x2010             MOVS     R0,#+16
   \   0000007E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     70             
     71             TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   00000082   0x2060             MOVS     R0,#+96
   \   00000084   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     72             TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xF8AD 0x0018      STRH     R0,[SP, #+24]
     73             TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     74             TIM_OCInitStructure.TIM_Pulse = 1500;
   \   00000094   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000098   0xF8AD 0x0016      STRH     R0,[SP, #+22]
     75             TIM_OC3Init(TIM3, &TIM_OCInitStructure); 
   \   0000009C   0xA904             ADD      R1,SP,#+16
   \   0000009E   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40000400
   \   000000A0   0x.... 0x....      BL       TIM_OC3Init
     76             
     77             TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
   \   000000A4   0xA901             ADD      R1,SP,#+4
   \   000000A6   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40000400
   \   000000A8   0x.... 0x....      BL       TIM_TimeBaseInit
     78             TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Disable);
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40000400
   \   000000B0   0x.... 0x....      BL       TIM_OC3PreloadConfig
     79             TIM_ARRPreloadConfig(TIM3, ENABLE);
   \   000000B4   0x2101             MOVS     R1,#+1
   \   000000B6   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40000400
   \   000000B8   0x.... 0x....      BL       TIM_ARRPreloadConfig
     80             TIM_Cmd(TIM3, ENABLE);
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40000400
   \   000000C0   0x.... 0x....      BL       TIM_Cmd
     81          }
   \   000000C4   0xB009             ADD      SP,SP,#+36
   \   000000C6   0xBD00             POP      {PC}             ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83           void TIM_Configure(void)
     84           {
   \                     TIM_Configure: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     85             TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
     86             TIM_TimeBaseStructure.TIM_Period = 10000;
   \   00000002   0xF242 0x7010      MOVW     R0,#+10000
   \   00000006   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     87             TIM_TimeBaseStructure.TIM_Prescaler = 7200;
   \   0000000A   0xF44F 0x50E1      MOV      R0,#+7200
   \   0000000E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     88             TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     89             TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     90             TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
   \   0000001E   0x4669             MOV      R1,SP
   \   00000020   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000024   0x.... 0x....      BL       TIM_TimeBaseInit
     91             TIM_Cmd(TIM2, ENABLE);
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000002E   0x.... 0x....      BL       TIM_Cmd
     92             TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
   \   00000032   0x2201             MOVS     R2,#+1
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000003A   0x.... 0x....      BL       TIM_ITConfig
     93           }
   \   0000003E   0xBD07             POP      {R0-R2,PC}       ;; return
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void Nvic_Init(void)
     96          {
   \                     Nvic_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97             NVIC_InitTypeDef NVIC_InitStructure;
     98             NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
   \   00000002   0x201C             MOVS     R0,#+28
   \   00000004   0xF88D 0x0000      STRB     R0,[SP, #+0]
     99             NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    100             NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
    101             NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF88D 0x0003      STRB     R0,[SP, #+3]
    102             NVIC_Init(&NVIC_InitStructure);
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       NVIC_Init
    103          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    104           void LED_Toggle(int num)
    105           {
   \                     LED_Toggle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    106             uint16_t pin;
    107             switch (num)
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD002             BEQ.N    ??LED_Toggle_0
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xD00E             BEQ.N    ??LED_Toggle_1
   \   0000000A   0xE00F             B.N      ??LED_Toggle_2
    108             {
    109             case 1:
    110               pin = GPIO_Pin_2;
   \                     ??LED_Toggle_0: (+1)
   \   0000000C   0x2404             MOVS     R4,#+4
    111               break;
    112             case 2:
    113               pin = GPIO_Pin_3;
    114               break;
    115             default:
    116               return;
    117             }
    118             if (GPIO_ReadOutputDataBit(GPIOD, pin) == Bit_RESET)
   \                     ??LED_Toggle_3: (+1)
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40011400
   \   00000014   0x.... 0x....      BL       GPIO_ReadOutputDataBit
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD108             BNE.N    ??LED_Toggle_4
    119             {
    120               GPIO_SetBits(GPIOD, pin);
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000020   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40011400
   \   00000022   0x.... 0x....      BL       GPIO_SetBits
   \   00000026   0xE007             B.N      ??LED_Toggle_5
    121             }
   \                     ??LED_Toggle_1: (+1)
   \   00000028   0x2408             MOVS     R4,#+8
   \   0000002A   0xE7F0             B.N      ??LED_Toggle_3
   \                     ??LED_Toggle_2: (+1)
   \   0000002C   0xE004             B.N      ??LED_Toggle_6
    122             else
    123             {
    124               GPIO_ResetBits(GPIOD, pin);
   \                     ??LED_Toggle_4: (+1)
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000032   0x....             LDR.N    R0,??DataTable5_3  ;; 0x40011400
   \   00000034   0x.... 0x....      BL       GPIO_ResetBits
    125             }
    126          }
   \                     ??LED_Toggle_5: (+1)
   \                     ??LED_Toggle_6: (+1)
   \   00000038   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    127          void moveMotor()
    128          {
   \                     moveMotor: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    129            TIM_OCInitTypeDef TIM_OCInitStructure;
    130            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   00000002   0x2060             MOVS     R0,#+96
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    131            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    132            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    133            TIM_OCInitStructure.TIM_Pulse = motorAngle + 700;
   \   00000014   0x....             LDR.N    R0,??DataTable5_8
   \   00000016   0x8800             LDRH     R0,[R0, #+0]
   \   00000018   0xF510 0x702F      ADDS     R0,R0,#+700
   \   0000001C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    134            if (motorDir == 0)
   \   00000020   0x....             LDR.N    R0,??DataTable5_9
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD10E             BNE.N    ??moveMotor_0
    135            {
    136              motorAngle = motorAngle + 100;
   \   00000028   0x....             LDR.N    R0,??DataTable5_8
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x3064             ADDS     R0,R0,#+100
   \   0000002E   0x....             LDR.N    R1,??DataTable5_8
   \   00000030   0x8008             STRH     R0,[R1, #+0]
    137              if (motorAngle == 1500)
   \   00000032   0x....             LDR.N    R0,??DataTable5_8
   \   00000034   0x8800             LDRH     R0,[R0, #+0]
   \   00000036   0xF240 0x51DC      MOVW     R1,#+1500
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD110             BNE.N    ??moveMotor_1
    138                 motorAngle = 0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable5_8
   \   00000042   0x8008             STRH     R0,[R1, #+0]
   \   00000044   0xE00C             B.N      ??moveMotor_1
    139            }
    140            else
    141             {
    142             motorAngle = motorAngle- 100;
   \                     ??moveMotor_0: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable5_8
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0x3864             SUBS     R0,R0,#+100
   \   0000004C   0x....             LDR.N    R1,??DataTable5_8
   \   0000004E   0x8008             STRH     R0,[R1, #+0]
    143             if (motorAngle == 0)
   \   00000050   0x....             LDR.N    R0,??DataTable5_8
   \   00000052   0x8800             LDRH     R0,[R0, #+0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD103             BNE.N    ??moveMotor_1
    144               motorAngle = 1500;
   \   00000058   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000005C   0x....             LDR.N    R1,??DataTable5_8
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    145             }
    146             TIM_OC3Init(TIM3, &TIM_OCInitStructure);
   \                     ??moveMotor_1: (+1)
   \   00000060   0x4669             MOV      R1,SP
   \   00000062   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40000400
   \   00000064   0x.... 0x....      BL       TIM_OC3Init
    147          }
   \   00000068   0xB005             ADD      SP,SP,#+20
   \   0000006A   0xBD00             POP      {PC}             ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          void TIM2_IRQHandler(void)
    150          {
   \                     TIM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    151            if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000008   0x.... 0x....      BL       TIM_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD023             BEQ.N    ??TIM2_IRQHandler_0
    152            {
    153              // 1@@@??count
    154              t1++;
   \   00000010   0x....             LDR.N    R0,??DataTable5_10
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x....             LDR.N    R1,??DataTable5_10
   \   00000018   0x8008             STRH     R0,[R1, #+0]
    155              t2++;
   \   0000001A   0x....             LDR.N    R0,??DataTable5_11
   \   0000001C   0x8800             LDRH     R0,[R0, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable5_11
   \   00000022   0x8008             STRH     R0,[R1, #+0]
    156              moveMotor();
   \   00000024   0x.... 0x....      BL       moveMotor
    157             if (ledOn == 1)
   \   00000028   0x....             LDR.N    R0,??DataTable5_12
   \   0000002A   0x8800             LDRH     R0,[R0, #+0]
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD10E             BNE.N    ??TIM2_IRQHandler_1
    158             {
    159               // led 1 toggle
    160               LED_Toggle(1);
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       LED_Toggle
    161               if (t1 % 5 == 0)
   \   00000036   0x....             LDR.N    R0,??DataTable5_10
   \   00000038   0x8800             LDRH     R0,[R0, #+0]
   \   0000003A   0x2105             MOVS     R1,#+5
   \   0000003C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000040   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD102             BNE.N    ??TIM2_IRQHandler_1
    162               {
    163               // led 2 toggle
    164               LED_Toggle(2);
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x.... 0x....      BL       LED_Toggle
    165               }
    166             }
    167             TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
   \                     ??TIM2_IRQHandler_1: (+1)
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000054   0x.... 0x....      BL       TIM_ClearITPendingBit
    168            }
    169          }
   \                     ??TIM2_IRQHandler_0: (+1)
   \   00000058   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    170          int main() {
   \                     main: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
    171          
    172          SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    173           RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
    174           GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
    175           TIM_Configure();
   \   0000000E   0x.... 0x....      BL       TIM_Configure
    176           Nvic_Init();
   \   00000012   0x.... 0x....      BL       Nvic_Init
    177           LCD_Init();
   \   00000016   0x.... 0x....      BL       LCD_Init
    178           Touch_Configuration();
   \   0000001A   0x.... 0x....      BL       Touch_Configuration
    179           Touch_Adjust();
   \   0000001E   0x.... 0x....      BL       Touch_Adjust
    180           
    181           
    182           uint16_t pos_x, pos_y;
    183           uint16_t pix_x, pix_y;
    184           t1 = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable5_10
   \   00000026   0x8008             STRH     R0,[R1, #+0]
    185           t2 = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable5_11
   \   0000002C   0x8008             STRH     R0,[R1, #+0]
    186           ledOn = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable5_12
   \   00000032   0x8008             STRH     R0,[R1, #+0]
    187           LCD_Clear(WHITE);
   \   00000034   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000038   0x.... 0x....      BL       LCD_Clear
    188           // team name
    189           LCD_ShowString(LCD_TEAM_NAME_X, LCD_TEAM_NAME_Y, "WED_Team10", BLUE, WHITE);
   \   0000003C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0x231F             MOVS     R3,#+31
   \   00000044   0x....             LDR.N    R2,??DataTable5_13
   \   00000046   0x....             LDR.N    R0,??DataTable5_14
   \   00000048   0x8801             LDRH     R1,[R0, #+0]
   \   0000004A   0x....             LDR.N    R0,??DataTable5_15
   \   0000004C   0x8800             LDRH     R0,[R0, #+0]
   \   0000004E   0x.... 0x....      BL       LCD_ShowString
    190           // button
    191           LCD_DrawRectangle(LCD_BUTTON_X, LCD_BUTTON_Y, LCD_BUTTON_X + LCD_BUTTON_W, LCD_BUTTON_Y + LCD_BUTTON_H);
   \   00000052   0x....             LDR.N    R0,??DataTable5_16
   \   00000054   0x8803             LDRH     R3,[R0, #+0]
   \   00000056   0x....             LDR.N    R0,??DataTable5_17
   \   00000058   0x8800             LDRH     R0,[R0, #+0]
   \   0000005A   0x18C3             ADDS     R3,R0,R3
   \   0000005C   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000005E   0x....             LDR.N    R0,??DataTable5_18
   \   00000060   0x8802             LDRH     R2,[R0, #+0]
   \   00000062   0x....             LDR.N    R0,??DataTable5_19
   \   00000064   0x8800             LDRH     R0,[R0, #+0]
   \   00000066   0x1882             ADDS     R2,R0,R2
   \   00000068   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006A   0x....             LDR.N    R0,??DataTable5_16
   \   0000006C   0x8801             LDRH     R1,[R0, #+0]
   \   0000006E   0x....             LDR.N    R0,??DataTable5_18
   \   00000070   0x8800             LDRH     R0,[R0, #+0]
   \   00000072   0x.... 0x....      BL       LCD_DrawRectangle
    192           LCD_ShowString(LCD_BUTTON_X + (LCD_BUTTON_W / 2), LCD_BUTTON_Y + (LCD_BUTTON_H / 2), "BUT", RED, WHITE);
   \   00000076   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000007A   0x9000             STR      R0,[SP, #+0]
   \   0000007C   0xF44F 0x4378      MOV      R3,#+63488
   \   00000080   0x....             ADR.N    R2,??DataTable5  ;; "BUT"
   \   00000082   0x....             LDR.N    R0,??DataTable5_16
   \   00000084   0x8801             LDRH     R1,[R0, #+0]
   \   00000086   0x....             LDR.N    R0,??DataTable5_17
   \   00000088   0x8800             LDRH     R0,[R0, #+0]
   \   0000008A   0x2402             MOVS     R4,#+2
   \   0000008C   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \   00000090   0x1841             ADDS     R1,R0,R1
   \   00000092   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000094   0x....             LDR.N    R0,??DataTable5_18
   \   00000096   0x8800             LDRH     R0,[R0, #+0]
   \   00000098   0x....             LDR.N    R4,??DataTable5_19
   \   0000009A   0x8824             LDRH     R4,[R4, #+0]
   \   0000009C   0x2502             MOVS     R5,#+2
   \   0000009E   0xFB94 0xF4F5      SDIV     R4,R4,R5
   \   000000A2   0x1820             ADDS     R0,R4,R0
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0x.... 0x....      BL       LCD_ShowString
   \   000000AA   0xE045             B.N      ??main_0
    193           while (1)
    194           {
    195           if (ledOn == 0)
    196           {
    197           LCD_ShowString(LCD_STATUS_X, LCD_STATUS_Y, "OFF", RED, WHITE);
    198           motorDir = 0;
    199           }
    200           else
    201           {
    202             LCD_ShowString(LCD_STATUS_X, LCD_STATUS_Y, "ON ", RED, WHITE) ;
    203             motorDir = 1;
    204           }
    205           // get touch coordinate
    206           Touch_GetXY(&pos_x, &pos_y, 1);
    207           Convert_Pos(pos_x, pos_y, &pix_x, &pix_y);
    208          if( 
    209             pix_x >= LCD_BUTTON_X &&
    210           pix_x <= LCD_BUTTON_X + LCD_BUTTON_W &&
    211           pix_y >= LCD_BUTTON_Y &&
    212           pix_x <= LCD_BUTTON_Y + LCD_BUTTON_H)
    213          {
    214            //button ?@@
    215            ledOn = !ledOn;
   \                     ??main_1: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xE040             B.N      ??main_2
   \                     ??main_3: (+1)
   \   000000B0   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0xF44F 0x4378      MOV      R3,#+63488
   \   000000BA   0x....             ADR.N    R2,??DataTable5_1  ;; "ON "
   \   000000BC   0x....             LDR.N    R0,??DataTable5_20
   \   000000BE   0x8801             LDRH     R1,[R0, #+0]
   \   000000C0   0x....             LDR.N    R0,??DataTable5_21
   \   000000C2   0x8800             LDRH     R0,[R0, #+0]
   \   000000C4   0x.... 0x....      BL       LCD_ShowString
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x....             LDR.N    R1,??DataTable5_9
   \   000000CC   0x8008             STRH     R0,[R1, #+0]
   \                     ??main_4: (+1)
   \   000000CE   0x2201             MOVS     R2,#+1
   \   000000D0   0xA902             ADD      R1,SP,#+8
   \   000000D2   0xF10D 0x000A      ADD      R0,SP,#+10
   \   000000D6   0x.... 0x....      BL       Touch_GetXY
   \   000000DA   0xF10D 0x0306      ADD      R3,SP,#+6
   \   000000DE   0xAA01             ADD      R2,SP,#+4
   \   000000E0   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   000000E4   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   000000E8   0x.... 0x....      BL       Convert_Pos
   \   000000EC   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000F0   0x....             LDR.N    R1,??DataTable5_18
   \   000000F2   0x8809             LDRH     R1,[R1, #+0]
   \   000000F4   0x4288             CMP      R0,R1
   \   000000F6   0xD31F             BCC.N    ??main_0
   \   000000F8   0x....             LDR.N    R0,??DataTable5_18
   \   000000FA   0x8801             LDRH     R1,[R0, #+0]
   \   000000FC   0x....             LDR.N    R0,??DataTable5_19
   \   000000FE   0x8800             LDRH     R0,[R0, #+0]
   \   00000100   0x1841             ADDS     R1,R0,R1
   \   00000102   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000106   0x4281             CMP      R1,R0
   \   00000108   0xDB16             BLT.N    ??main_0
   \   0000010A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000010E   0x....             LDR.N    R1,??DataTable5_16
   \   00000110   0x8809             LDRH     R1,[R1, #+0]
   \   00000112   0x4288             CMP      R0,R1
   \   00000114   0xD310             BCC.N    ??main_0
   \   00000116   0x....             LDR.N    R0,??DataTable5_16
   \   00000118   0x8801             LDRH     R1,[R0, #+0]
   \   0000011A   0x....             LDR.N    R0,??DataTable5_17
   \   0000011C   0x8800             LDRH     R0,[R0, #+0]
   \   0000011E   0x1841             ADDS     R1,R0,R1
   \   00000120   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000124   0x4281             CMP      R1,R0
   \   00000126   0xDB07             BLT.N    ??main_0
   \   00000128   0x....             LDR.N    R0,??DataTable5_12
   \   0000012A   0x8800             LDRH     R0,[R0, #+0]
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD1BD             BNE.N    ??main_1
   \   00000130   0x2001             MOVS     R0,#+1
   \                     ??main_2: (+1)
   \   00000132   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000134   0x....             LDR.N    R1,??DataTable5_12
   \   00000136   0x8008             STRH     R0,[R1, #+0]
    216          }
   \                     ??main_0: (+1)
   \   00000138   0x....             LDR.N    R0,??DataTable5_12
   \   0000013A   0x8800             LDRH     R0,[R0, #+0]
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD1B7             BNE.N    ??main_3
   \   00000140   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000144   0x9000             STR      R0,[SP, #+0]
   \   00000146   0xF44F 0x4378      MOV      R3,#+63488
   \   0000014A   0x....             ADR.N    R2,??DataTable5_2  ;; "OFF"
   \   0000014C   0x....             LDR.N    R0,??DataTable5_20
   \   0000014E   0x8801             LDRH     R1,[R0, #+0]
   \   00000150   0x....             LDR.N    R0,??DataTable5_21
   \   00000152   0x8800             LDRH     R0,[R0, #+0]
   \   00000154   0x.... 0x....      BL       LCD_ShowString
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x....             LDR.N    R1,??DataTable5_9
   \   0000015C   0x8008             STRH     R0,[R1, #+0]
   \   0000015E   0xE7B6             B.N      ??main_4
    217          }
    218          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x42 0x55          DC8      "BUT"
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4F 0x4E          DC8      "ON "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4F 0x46          DC8      "OFF"
   \              0x46 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     motorAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     motorDir

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     t1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     t2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     ledOn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     LCD_TEAM_NAME_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     LCD_TEAM_NAME_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     LCD_BUTTON_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x........         DC32     LCD_BUTTON_H

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     LCD_BUTTON_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x........         DC32     LCD_BUTTON_W

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     LCD_STATUS_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x........         DC32     LCD_STATUS_X

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x57 0x45          DC8 "WED_Team10"
   \              0x44 0x5F    
   \              0x54 0x65    
   \              0x61 0x6D    
   \              0x31 0x30    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x42 0x55          DC8 "BUT"
   \              0x54 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x4F 0x46          DC8 "OFF"
   \              0x46 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x4F 0x4E          DC8 "ON "
   \              0x20 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   GPIO_Configure
        40   -> GPIO_Init
        40   -> TIM_ARRPreloadConfig
        40   -> TIM_Cmd
        40   -> TIM_OC3Init
        40   -> TIM_OC3PreloadConfig
        40   -> TIM_TimeBaseInit
       8   LED_Toggle
         8   -> GPIO_ReadOutputDataBit
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   Nvic_Init
         8   -> NVIC_Init
       8   RCC_Configure
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
       8   TIM2_IRQHandler
         8   -> LED_Toggle
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
         8   -> moveMotor
      16   TIM_Configure
        16   -> TIM_Cmd
        16   -> TIM_ITConfig
        16   -> TIM_TimeBaseInit
      24   main
        24   -> Convert_Pos
        24   -> GPIO_Configure
        24   -> LCD_Clear
        24   -> LCD_DrawRectangle
        24   -> LCD_Init
        24   -> LCD_ShowString
        24   -> Nvic_Init
        24   -> RCC_Configure
        24   -> SystemInit
        24   -> TIM_Configure
        24   -> Touch_Adjust
        24   -> Touch_Configuration
        24   -> Touch_GetXY
      24   moveMotor
        24   -> TIM_OC3Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      12  ?_0
       4  ?_1
       4  ?_2
       4  ?_3
     200  GPIO_Configure
       2  LCD_BUTTON_H
       2  LCD_BUTTON_W
       2  LCD_BUTTON_X
       2  LCD_BUTTON_Y
       2  LCD_STATUS_X
       2  LCD_STATUS_Y
       2  LCD_TEAM_NAME_X
       2  LCD_TEAM_NAME_Y
      58  LED_Toggle
      34  Nvic_Init
      44  RCC_Configure
      90  TIM2_IRQHandler
      64  TIM_Configure
      48  color
       2  ledOn
     352  main
       2  motorAngle
       2  motorDir
     108  moveMotor
       2  t1
       2  t2

 
    10 bytes in section .bss
    64 bytes in section .data
    24 bytes in section .rodata
 1 038 bytes in section .text
 
 1 038 bytes of CODE  memory
    24 bytes of CONST memory
    74 bytes of DATA  memory

Errors: none
Warnings: none
