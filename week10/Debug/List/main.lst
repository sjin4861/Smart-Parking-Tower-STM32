###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       06/Nov/2024  20:34:43
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu10\Desktop\week9\user\main.c
#    Command line =  
#        -f C:\Users\pnu10\AppData\Local\Temp\EWF72B.tmp
#        (C:\Users\pnu10\Desktop\week9\user\main.c -D USE_STDPERIPH_DRIVER -D
#        STM32F10X_CL -lC C:\Users\pnu10\Desktop\week9\Debug\List -o
#        C:\Users\pnu10\Desktop\week9\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu10\Desktop\week9\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu10\Desktop\week9\libraries\CMSIS\DeviceSupport\Startup\ -I
#        C:\Users\pnu10\Desktop\week9\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu10\Desktop\week9\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu10\Desktop\week9\libraries\LCD\ -I
#        C:\Users\pnu10\Desktop\week9\user\ -I
#        C:\Users\pnu10\Desktop\week9\user\inc\ -Ol -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Core\Include\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu10\Desktop\week9\Debug\List\main.lst
#    Object file  =  C:\Users\pnu10\Desktop\week9\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu10\Desktop\week9\user\main.c
      1          #include "stm32f10x.h"
      2           #include "core_cm3.h"
      3           #include "misc.h"
      4           #include "stm32f10x_gpio.h"
      5           #include "stm32f10x_rcc.h"
      6           #include "stm32f10x_usart.h"
      7           #include "stm32f10x_adc.h"
      8           #include "touch.h"
      9           #include "lcd.h"
     10           //?@@ @@@ ?@@
     11          

   \                                 In section .bss, align 2
     12          uint16_t value=0;
   \                     value:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     13          uint16_t x;
   \                     x:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     14          uint16_t y;
   \                     y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     15          uint16_t con_x;
   \                     con_x:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     16          uint16_t con_y;
   \                     con_y:
   \   00000000                      DS8 2
     17          
     18          
     19          

   \                                 In section .data, align 4
     20           int color[12] = 
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 64519
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000FC07   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     21            {WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,BRRED,GRAY};
     22          
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void RCC_Configure(void)
     25          {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     26            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     27            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     28            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     29            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     30            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2040             MOVS     R0,#+64
   \   00000026   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     31            
     32            RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xF44F 0x7000      MOV      R0,#+512
   \   00000030   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     33          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void GPIO_Configure()
     36          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     37            GPIO_InitTypeDef GPIO_InitStructure;
     38            
     39            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     40            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     41            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
     42            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable4  ;; 0x40011000
   \   00000018   0x.... 0x....      BL       GPIO_Init
     43            
     44          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void ADC_Configure(void)
     47          {
   \                     ADC_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     48            ADC_InitTypeDef ADC_InitStructure;
     49            
     50            ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0005      STRB     R0,[SP, #+5]
     51            ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9003             STR      R0,[SP, #+12]
     52            ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \   0000000E   0xF45F 0x2060      MOVS     R0,#+917504
   \   00000012   0x9002             STR      R0,[SP, #+8]
     53            ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9000             STR      R0,[SP, #+0]
     54            ADC_InitStructure.ADC_NbrOfChannel = 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     55            ADC_InitStructure.ADC_ScanConvMode = DISABLE;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0004      STRB     R0,[SP, #+4]
     56            
     57            ADC_Init(ADC1, &ADC_InitStructure);
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000028   0x.... 0x....      BL       ADC_Init
     58            
     59            ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_239Cycles5);
   \   0000002C   0x2307             MOVS     R3,#+7
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000034   0x.... 0x....      BL       ADC_RegularChannelConfig
     60            ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0xF44F 0x7108      MOV      R1,#+544
   \   0000003E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000040   0x.... 0x....      BL       ADC_ITConfig
     61            ADC_Cmd(ADC1, ENABLE);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000048   0x.... 0x....      BL       ADC_Cmd
     62            ADC_ResetCalibration(ADC1);
   \   0000004C   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000004E   0x.... 0x....      BL       ADC_ResetCalibration
     63            while(ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_0: (+1)
   \   00000052   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000054   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD1FA             BNE.N    ??ADC_Configure_0
     64            
     65            ADC_StartCalibration(ADC1);
   \   0000005C   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000005E   0x.... 0x....      BL       ADC_StartCalibration
     66            while(ADC_GetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_1: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000064   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1FA             BNE.N    ??ADC_Configure_1
     67            
     68            ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000070   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     69                                 
     70          }
   \   00000074   0xB005             ADD      SP,SP,#+20
   \   00000076   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
     71          void NVIC_Configure(void){
   \                     NVIC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     72            NVIC_InitTypeDef NVIC_InitStructure;
     73            
     74            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
   \   00000002   0xF44F 0x60C0      MOV      R0,#+1536
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
     75            
     76            NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
   \   0000000A   0x2012             MOVS     R0,#+18
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     77            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
     78            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0002      STRB     R0,[SP, #+2]
     79            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0001      STRB     R0,[SP, #+1]
     80            NVIC_Init(&NVIC_InitStructure);
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       NVIC_Init
     81          }
   \   00000028   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     82          void ADC1_2_IRQHandler() {
   \                     ADC1_2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     83            
     84            if(ADC_GetITStatus(ADC1, ADC_IT_EOC) != RESET){
   \   00000002   0xF44F 0x7108      MOV      R1,#+544
   \   00000006   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000008   0x.... 0x....      BL       ADC_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD004             BEQ.N    ??ADC1_2_IRQHandler_0
     85              value = ADC_GetConversionValue(ADC1);
   \   00000010   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000012   0x.... 0x....      BL       ADC_GetConversionValue
   \   00000016   0x....             LDR.N    R1,??DataTable4_2
   \   00000018   0x8008             STRH     R0,[R1, #+0]
     86            }
     87            ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
   \                     ??ADC1_2_IRQHandler_0: (+1)
   \   0000001A   0xF44F 0x7108      MOV      R1,#+544
   \   0000001E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000020   0x.... 0x....      BL       ADC_ClearITPendingBit
     88          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     89          

   \                                 In section .text, align 2, keep-with-next
     90          int main() {
   \                     main: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
     91          
     92          SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
     93           RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
     94           GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
     95           ADC_Configure();
   \   0000000E   0x.... 0x....      BL       ADC_Configure
     96           NVIC_Configure();
   \   00000012   0x.... 0x....      BL       NVIC_Configure
     97           // -----------------------------------
     98           LCD_Init();
   \   00000016   0x.... 0x....      BL       LCD_Init
     99           Touch_Configuration();
   \   0000001A   0x.... 0x....      BL       Touch_Configuration
    100           Touch_Adjust();
   \   0000001E   0x.... 0x....      BL       Touch_Adjust
    101           LCD_Clear(WHITE);
   \   00000022   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000026   0x.... 0x....      BL       LCD_Clear
    102           
    103           
    104           
    105           while(1){
    106           
    107           Touch_GetXY(&x, &y, 1);
   \                     ??main_0: (+1)
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable4_3
   \   0000002E   0x....             LDR.N    R0,??DataTable4_4
   \   00000030   0x.... 0x....      BL       Touch_GetXY
    108           Convert_Pos(x, y, &con_x, &con_y);
   \   00000034   0x....             LDR.N    R3,??DataTable4_5
   \   00000036   0x....             LDR.N    R2,??DataTable4_6
   \   00000038   0x....             LDR.N    R0,??DataTable4_3
   \   0000003A   0x8801             LDRH     R1,[R0, #+0]
   \   0000003C   0x....             LDR.N    R0,??DataTable4_4
   \   0000003E   0x8800             LDRH     R0,[R0, #+0]
   \   00000040   0x.... 0x....      BL       Convert_Pos
    109           ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000048   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    110           LCD_DrawCircle(con_x,con_y,5);
   \   0000004C   0x2205             MOVS     R2,#+5
   \   0000004E   0x....             LDR.N    R0,??DataTable4_5
   \   00000050   0x8801             LDRH     R1,[R0, #+0]
   \   00000052   0x....             LDR.N    R0,??DataTable4_6
   \   00000054   0x8800             LDRH     R0,[R0, #+0]
   \   00000056   0x.... 0x....      BL       LCD_DrawCircle
    111           LCD_ShowString(30, 30, "WED_Team10", BLACK, WHITE);
   \   0000005A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x2300             MOVS     R3,#+0
   \   00000062   0x....             LDR.N    R2,??DataTable4_7
   \   00000064   0x211E             MOVS     R1,#+30
   \   00000066   0x201E             MOVS     R0,#+30
   \   00000068   0x.... 0x....      BL       LCD_ShowString
    112           LCD_ShowNum(0, 50, con_x, 3, BLACK, WHITE);
   \   0000006C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000070   0x9001             STR      R0,[SP, #+4]
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9000             STR      R0,[SP, #+0]
   \   00000076   0x2303             MOVS     R3,#+3
   \   00000078   0x....             LDR.N    R0,??DataTable4_6
   \   0000007A   0x8802             LDRH     R2,[R0, #+0]
   \   0000007C   0x2132             MOVS     R1,#+50
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x.... 0x....      BL       LCD_ShowNum
    113           LCD_ShowNum(0, 100, con_y, 3, BLACK, WHITE);
   \   00000084   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000088   0x9001             STR      R0,[SP, #+4]
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x9000             STR      R0,[SP, #+0]
   \   0000008E   0x2303             MOVS     R3,#+3
   \   00000090   0x....             LDR.N    R0,??DataTable4_5
   \   00000092   0x8802             LDRH     R2,[R0, #+0]
   \   00000094   0x2164             MOVS     R1,#+100
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      BL       LCD_ShowNum
    114           LCD_ShowNum(0, 150, value, 3, BLACK, WHITE);
   \   0000009C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000A0   0x9001             STR      R0,[SP, #+4]
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0x2303             MOVS     R3,#+3
   \   000000A8   0x....             LDR.N    R0,??DataTable4_2
   \   000000AA   0x8802             LDRH     R2,[R0, #+0]
   \   000000AC   0x2196             MOVS     R1,#+150
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       LCD_ShowNum
   \   000000B4   0xE7B9             B.N      ??main_0
    115           
    116             
    117          }
    118          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     con_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     con_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x57 0x45          DC8 "WED_Team10"
   \              0x44 0x5F    
   \              0x54 0x65    
   \              0x61 0x6D    
   \              0x31 0x30    
   \              0x00         
   \   0000000B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC1_2_IRQHandler
         8   -> ADC_ClearITPendingBit
         8   -> ADC_GetConversionValue
         8   -> ADC_GetITStatus
      24   ADC_Configure
        24   -> ADC_Cmd
        24   -> ADC_GetCalibrationStatus
        24   -> ADC_GetResetCalibrationStatus
        24   -> ADC_ITConfig
        24   -> ADC_Init
        24   -> ADC_RegularChannelConfig
        24   -> ADC_ResetCalibration
        24   -> ADC_SoftwareStartConvCmd
        24   -> ADC_StartCalibration
       8   GPIO_Configure
         8   -> GPIO_Init
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
       8   RCC_Configure
         8   -> RCC_APB2PeriphClockCmd
      16   main
        16   -> ADC_Configure
        16   -> ADC_SoftwareStartConvCmd
        16   -> Convert_Pos
        16   -> GPIO_Configure
        16   -> LCD_Clear
        16   -> LCD_DrawCircle
        16   -> LCD_Init
        16   -> LCD_ShowNum
        16   -> LCD_ShowString
        16   -> NVIC_Configure
        16   -> RCC_Configure
        16   -> SystemInit
        16   -> Touch_Adjust
        16   -> Touch_Configuration
        16   -> Touch_GetXY


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
      12  ?_0
      38  ADC1_2_IRQHandler
     120  ADC_Configure
      30  GPIO_Configure
      42  NVIC_Configure
      54  RCC_Configure
      48  color
       2  con_x
       2  con_y
     182  main
       2  value
       2  x
       2  y

 
  10 bytes in section .bss
  48 bytes in section .data
  12 bytes in section .rodata
 498 bytes in section .text
 
 498 bytes of CODE  memory
  12 bytes of CONST memory
  58 bytes of DATA  memory

Errors: none
Warnings: none
