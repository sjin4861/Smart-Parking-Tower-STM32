###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       13/Nov/2024  20:48:23
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\user\main.c
#    Command line =  
#        -f C:\Users\pnu10\AppData\Local\Temp\EW285B.tmp
#        (C:\Users\pnu10\Desktop\embedded_system-main\week12\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\Debug\List -o
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu10\Desktop\embedded_system-main\week12\libraries\LCD\
#        -I C:\Users\pnu10\Desktop\embedded_system-main\week12\user\ -I
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\user\inc\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\Debug\List\main.lst
#    Object file  =  
#        C:\Users\pnu10\Desktop\embedded_system-main\week12\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu10\Desktop\embedded_system-main\week12\user\main.c
      1          #include "stm32f10x.h"
      2           #include "core_cm3.h"
      3           #include "misc.h"
      4           #include "stm32f10x_gpio.h"
      5           #include "stm32f10x_rcc.h"
      6           #include "stm32f10x_usart.h"
      7           #include "stm32f10x_adc.h"
      8           #include "touch.h"
      9           #include "lcd.h"
     10           //?@@ @@@ ?@@
     11          
     12          

   \                                 In section .bss, align 4
     13          volatile uint32_t ADC_Value[1];
   \                     ADC_Value:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     14           int color[12] = 
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 64519
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000FC07   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     15            {WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,BRRED,GRAY};
     16          
     17          

   \                                 In section .text, align 2, keep-with-next
     18          void RCC_Configure(void)
     19          {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     20            
     21            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);//DAM1?@@?
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     22            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);//C port ?@@?
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     23            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);//C port ?@@?
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2008             MOVS     R0,#+8
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     24            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);//C port ?@@?
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     25            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);//C port ?@@?
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2020             MOVS     R0,#+32
   \   00000026   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     26            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);//C port ?@@?
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2040             MOVS     R0,#+64
   \   0000002E   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     27            RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); // ADC ?@@?
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0xF44F 0x7000      MOV      R0,#+512
   \   00000038   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     28          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void GPIO_Configure()
     31          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     32            GPIO_InitTypeDef GPIO_InitStructure;
     33            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     34            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     35            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
     36            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable4  ;; 0x40011000
   \   00000018   0x.... 0x....      BL       GPIO_Init
     37            
     38          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void ADC_Configure(void)
     41          {
   \                     ADC_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     42            ADC_InitTypeDef ADC_InitStructure;
     43            
     44            ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xF88D 0x0005      STRB     R0,[SP, #+5]
     45            ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9003             STR      R0,[SP, #+12]
     46            ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \   0000000E   0xF45F 0x2060      MOVS     R0,#+917504
   \   00000012   0x9002             STR      R0,[SP, #+8]
     47            ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9000             STR      R0,[SP, #+0]
     48            ADC_InitStructure.ADC_NbrOfChannel = 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     49            ADC_InitStructure.ADC_ScanConvMode = DISABLE;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0004      STRB     R0,[SP, #+4]
     50            ADC_Init(ADC1, &ADC_InitStructure);
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000028   0x.... 0x....      BL       ADC_Init
     51            
     52            ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_55Cycles5);
   \   0000002C   0x2305             MOVS     R3,#+5
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000034   0x.... 0x....      BL       ADC_RegularChannelConfig
     53            ADC_DMACmd(ADC1, ENABLE);
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000003C   0x.... 0x....      BL       ADC_DMACmd
     54            
     55            ADC_Cmd(ADC1, ENABLE);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000044   0x.... 0x....      BL       ADC_Cmd
     56            ADC_ResetCalibration(ADC1);
   \   00000048   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000004A   0x.... 0x....      BL       ADC_ResetCalibration
     57            while (ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_0: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000050   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD1FA             BNE.N    ??ADC_Configure_0
     58            ADC_StartCalibration(ADC1);
   \   00000058   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000005A   0x.... 0x....      BL       ADC_StartCalibration
     59            while (ADC_GetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_1: (+1)
   \   0000005E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000060   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD1FA             BNE.N    ??ADC_Configure_1
     60            ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000006C   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     61            
     62          }
   \   00000070   0xB005             ADD      SP,SP,#+20
   \   00000072   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
     63          void DMA_Configure(void)
     64          {
   \                     DMA_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     65            DMA_InitTypeDef DMA_InitStructure;
     66            DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
   \   00000004   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4001244c
   \   00000006   0x9000             STR      R0,[SP, #+0]
     67            DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_Value;
   \   00000008   0x....             LDR.N    R0,??DataTable4_3
   \   0000000A   0x9001             STR      R0,[SP, #+4]
     68            DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9002             STR      R0,[SP, #+8]
     69            DMA_InitStructure.DMA_BufferSize = 4;
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x9003             STR      R0,[SP, #+12]
     70            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
   \   00000014   0xF44F 0x6000      MOV      R0,#+2048
   \   00000018   0x9007             STR      R0,[SP, #+28]
     71            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
   \   0000001A   0xF44F 0x7000      MOV      R0,#+512
   \   0000001E   0x9006             STR      R0,[SP, #+24]
     72            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x9004             STR      R0,[SP, #+16]
     73            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9005             STR      R0,[SP, #+20]
     74            DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   \   00000028   0x2020             MOVS     R0,#+32
   \   0000002A   0x9008             STR      R0,[SP, #+32]
     75            DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
   \   0000002C   0xF44F 0x5040      MOV      R0,#+12288
   \   00000030   0x9009             STR      R0,[SP, #+36]
     76            DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x900A             STR      R0,[SP, #+40]
     77           
     78            DMA_DeInit(DMA1_Channel1);
   \   00000036   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40020008
   \   00000038   0x.... 0x....      BL       DMA_DeInit
     79            DMA_Init(DMA1_Channel1, &DMA_InitStructure);
   \   0000003C   0x4669             MOV      R1,SP
   \   0000003E   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40020008
   \   00000040   0x.... 0x....      BL       DMA_Init
     80            DMA_Cmd(DMA1_Channel1, ENABLE);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40020008
   \   00000048   0x.... 0x....      BL       DMA_Cmd
     81            
     82          }
   \   0000004C   0xB00B             ADD      SP,SP,#+44
   \   0000004E   0xBD00             POP      {PC}             ;; return
     83          
     84          

   \                                 In section .text, align 2, keep-with-next
     85          int main() {
   \                     main: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
     86          
     87           SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
     88           RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
     89           GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
     90           ADC_Configure();
   \   0000000E   0x.... 0x....      BL       ADC_Configure
     91           DMA_Configure();
   \   00000012   0x.... 0x....      BL       DMA_Configure
     92           // -----------------------------------
     93           LCD_Init();
   \   00000016   0x.... 0x....      BL       LCD_Init
     94           Touch_Configuration();
   \   0000001A   0x.... 0x....      BL       Touch_Configuration
     95           Touch_Adjust();
   \   0000001E   0x.... 0x....      BL       Touch_Adjust
     96           LCD_Clear(WHITE);
   \   00000022   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000026   0x.... 0x....      BL       LCD_Clear
     97           
     98           uint32_t threshold = 3000;
   \   0000002A   0xF640 0x35B8      MOVW     R5,#+3000
     99           
    100           int flag = 0;
   \   0000002E   0x2400             MOVS     R4,#+0
   \   00000030   0xE012             B.N      ??main_0
    101           
    102           while (1)
    103           {
    104             if(ADC_Value[0] > threshold) {
    105               if (!flag){
   \                     ??main_1: (+1)
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD104             BNE.N    ??main_2
    106                LCD_Clear(GRAY);
   \   00000036   0xF248 0x4030      MOVW     R0,#+33840
   \   0000003A   0x.... 0x....      BL       LCD_Clear
    107                flag = 1;
   \   0000003E   0x2401             MOVS     R4,#+1
    108               }
    109               LCD_ShowNum(30, 50, ADC_Value[0], 4, YELLOW, BLACK);
   \                     ??main_2: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0xF64F 0x70E0      MOVW     R0,#+65504
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x2304             MOVS     R3,#+4
   \   0000004C   0x....             LDR.N    R0,??DataTable4_3
   \   0000004E   0x6802             LDR      R2,[R0, #+0]
   \   00000050   0x2132             MOVS     R1,#+50
   \   00000052   0x201E             MOVS     R0,#+30
   \   00000054   0x.... 0x....      BL       LCD_ShowNum
    110               
    111             }
   \                     ??main_0: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable4_3
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x4285             CMP      R5,R0
   \   0000005E   0xD3E8             BCC.N    ??main_1
    112             else {
    113               if (flag){
   \   00000060   0x2C00             CMP      R4,#+0
   \   00000062   0xD004             BEQ.N    ??main_3
    114                LCD_Clear(WHITE);
   \   00000064   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000068   0x.... 0x....      BL       LCD_Clear
    115                flag = 0;
   \   0000006C   0x2400             MOVS     R4,#+0
    116               }
    117               LCD_ShowNum(30, 50, ADC_Value[0], 4, YELLOW, BLACK);
   \                     ??main_3: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9001             STR      R0,[SP, #+4]
   \   00000072   0xF64F 0x70E0      MOVW     R0,#+65504
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x2304             MOVS     R3,#+4
   \   0000007A   0x....             LDR.N    R0,??DataTable4_3
   \   0000007C   0x6802             LDR      R2,[R0, #+0]
   \   0000007E   0x2132             MOVS     R1,#+50
   \   00000080   0x201E             MOVS     R0,#+30
   \   00000082   0x.... 0x....      BL       LCD_ShowNum
   \   00000086   0xE7E7             B.N      ??main_0
    118             }
    119           }
    120           return 0;
                  ^
Warning[Pe111]: statement is unreachable
    121          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4001244C         DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ADC_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40020008         DC32     0x40020008

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ADC_Configure
        24   -> ADC_Cmd
        24   -> ADC_DMACmd
        24   -> ADC_GetCalibrationStatus
        24   -> ADC_GetResetCalibrationStatus
        24   -> ADC_Init
        24   -> ADC_RegularChannelConfig
        24   -> ADC_ResetCalibration
        24   -> ADC_SoftwareStartConvCmd
        24   -> ADC_StartCalibration
      48   DMA_Configure
        48   -> DMA_Cmd
        48   -> DMA_DeInit
        48   -> DMA_Init
       8   GPIO_Configure
         8   -> GPIO_Init
       8   RCC_Configure
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      24   main
        24   -> ADC_Configure
        24   -> DMA_Configure
        24   -> GPIO_Configure
        24   -> LCD_Clear
        24   -> LCD_Init
        24   -> LCD_ShowNum
        24   -> RCC_Configure
        24   -> SystemInit
        24   -> Touch_Adjust
        24   -> Touch_Configuration


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
     116  ADC_Configure
       4  ADC_Value
      80  DMA_Configure
      30  GPIO_Configure
      62  RCC_Configure
      48  color
     136  main

 
   4 bytes in section .bss
  48 bytes in section .data
 444 bytes in section .text
 
 444 bytes of CODE memory
  52 bytes of DATA memory

Errors: none
Warnings: 1
